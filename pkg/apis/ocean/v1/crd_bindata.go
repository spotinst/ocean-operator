// Package v1 Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../../../../deploy/crds/ocean.spot.io_clusters_crd.yaml
// ../../../../deploy/crds/ocean.spot.io_launchspecs_crd.yaml
package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _oceanSpotIo_clusters_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4b\x73\xdb\xbe\x11\xbf\xfb\x53\xec\x4c\x0f\xb9\x44\xf2\xa4\xff\x4e\xa7\xa3\x9b\x47\x4e\x53\xb5\x49\xec\xb1\xe5\xdc\x57\xe0\x8a\xda\x1a\x0f\x06\x0f\xd9\x4a\xa7\xdf\xbd\x03\x90\x94\x44\x8a\xa4\x1e\x8e\x0f\xc5\x4d\xe0\x62\x1f\xbf\x7d\x00\x58\x08\x0b\xfe\x41\xd6\xb1\xd1\x13\xc0\x82\xe9\xd5\x93\x8e\xbf\xdc\xf8\xf9\x6f\x6e\xcc\xe6\x7a\xfd\x69\x41\x1e\x3f\x5d\x3d\xb3\xce\x26\x30\x0d\xce\x1b\xf5\x40\xce\x04\x2b\xe8\x96\x96\xac\xd9\xb3\xd1\x57\x8a\x3c\x66\xe8\x71\x72\x05\xa0\x51\xd1\x04\x84\x0c\xce\x93\x75\x63\x23\x08\xf5\xd8\x15\xc6\x8f\xd9\x5c\x01\xa0\xd6\xc6\x63\x5c\xe5\x22\x35\xc0\x8a\xa4\x1a\xbb\xd5\xf5\xca\x98\xe7\x09\x08\x9b\x8d\x58\x3b\x8f\x52\x5e\xb9\x82\x44\xa4\xc1\x2c\x4b\x62\x50\xde\x5b\xd6\x9e\xec\xd4\xc8\xa0\xca\xf5\x23\xf8\xe7\xe3\xdd\xf7\x7b\xf4\xab\x09\x8c\x9d\x47\x1f\x2a\x91\xb3\x2c\x71\xcf\xc8\x09\xcb\x85\x4f\x26\xce\x57\x04\x41\xf3\xcf\x40\x30\xbb\x05\xb3\x04\xbf\x22\x98\x96\x9a\x26\xea\x52\xf7\x6a\x06\x66\xb7\x69\xd2\x6f\x0a\x9a\x80\xf3\x96\x75\x7e\x20\xb1\x20\x31\xb6\x94\x47\x10\x3a\xc5\x95\xdf\xfa\x65\x3d\xec\xd6\x0e\xca\x29\x2d\xd3\x26\x23\x37\x16\xc1\x5a\xd2\xbe\x5b\x60\xf5\x11\x74\x50\x0b\xb2\x51\x70\x5a\x04\xc2\x12\x7a\xca\x60\xb1\xe9\xd1\xe4\x7b\x24\xdb\x53\x24\x22\x9d\x27\x8a\x86\x26\xb5\xab\xc7\x89\x21\x1b\x3d\x67\x45\xce\xa3\x2a\xf6\x78\xdd\xe4\xb4\xc7\x29\x43\x1f\x7f\xe6\xd6\x84\x62\x02\xed\x80\x88\x2b\xaa\x50\xa8\xa2\x6c\x4f\x35\xc9\xce\xff\x6b\x7f\xf6\x2b\xbb\xd2\xf0\x42\x06\x8b\x72\x17\x68\x69\xd2\xb1\xce\x83\x44\xbb\x9d\xbe\x02\x70\xc2\x44\x25\xbe\x47\x31\x05\x0a\x8a\x71\xe1\xc2\xc2\x56\x51\x5c\x89\x2e\x01\x9e\xc0\x7f\xfe\x7b\x05\xb0\x46\xc9\x59\x32\xae\xfc\x68\x0a\xd2\x37\xf7\xb3\x1f\x7f\x3c\x8a\x15\x29\x2c\x27\x5b\xd8\xd7\x41\x23\x8c\x76\xec\xbc\x8b\xc8\x1b\x4d\x60\x2c\x28\x63\x09\xbe\x62\xd0\x62\x05\x8f\x05\x09\x07\xa8\x33\xc0\xe0\x8d\x42\xcf\x02\xa5\xdc\x80\x13\x28\xc9\xc1\xc6\x04\x0b\xac\x97\x16\x9d\xb7\x41\xf8\x60\x69\x5c\x49\x2b\xac\x29\xc8\x7a\xae\x35\x8e\x63\x2f\x7f\xb7\x73\x2d\xbd\x3e\x44\xc5\x4b\x1a\xc8\x62\xc6\x92\x4b\x01\xb0\x2e\xe7\x28\x03\x97\x8c\x2a\x43\x94\x1d\x58\x2a\x2c\x39\xd2\x65\x92\xee\xb1\x85\x48\x82\x1a\xcc\xe2\xdf\x24\xfc\x18\x1e\xc9\x46\x26\xe0\x56\x26\xc8\x2c\x1a\xbe\x26\xeb\xc1\x92\x30\xb9\xe6\x5f\x5b\xce\x0e\xbc\x49\x22\x25\x7a\xaa\xbc\x57\x8f\x94\xce\x1a\x65\x84\x3c\xd0\xc7\x04\x8c\xc2\x0d\x58\x8a\x32\x20\xe8\x3d\x6e\x89\xc4\x8d\xe1\x5b\x84\x93\xf5\xd2\x4c\x60\xe5\x7d\xe1\x26\xd7\xd7\x39\xfb\xba\x62\x09\xa3\x54\xd0\xec\x37\xd7\xc2\x68\x6f\x79\x11\xbc\xb1\xee\x3a\xa3\x35\xc9\x6b\xc7\xf9\x08\xad\x58\xb1\xa7\x84\xed\x35\x16\x3c\x4a\x8a\xeb\x54\x91\xc6\x2a\xfb\xd3\x36\x30\x3e\xec\x69\xda\xca\xcd\x72\xa4\x70\xed\xc5\x3d\x86\x2d\xb0\x03\xac\x96\x95\xfa\xef\xe0\x8d\x53\x11\x95\x87\xcf\x8f\x73\xa8\x85\x26\x17\x34\x31\x4f\x68\xef\x96\xb9\x1d\xf0\x11\x28\xd6\x4b\xb2\xa5\xe3\x96\xd6\xa8\xc4\x91\x74\x56\x18\xd6\x3e\xfd\x10\x92\xeb\x5a\x51\x0f\x17\x16\x8a\x7d\xf4\xf4\xcf\x40\x31\x54\xbd\x19\xc3\x34\x15\x66\x58\x10\x84\x22\x26\x6c\x36\x86\x99\x86\x29\x2a\x92\x53\x74\xf4\xee\xb0\x47\x84\xdd\x28\x42\x7a\x1c\xf8\xfd\xed\xa6\x49\x58\xa2\xb5\x9d\xae\x77\x90\x4e\x0f\xc5\x54\xe4\x25\x8b\x14\xe7\x75\x85\xce\xc8\xb1\x8d\x65\x92\x56\xb8\x66\x63\x5b\x95\x7b\xbc\xc7\xac\x2b\x21\x53\x52\x06\x6f\x1e\x63\x3a\xdb\xe6\x7c\x4b\xfc\xcd\x96\xac\x91\x97\xb5\x02\xb1\x20\x51\x94\xbe\xa3\x1b\xb7\xd8\xf5\x29\x10\x87\x30\x46\x66\xe6\x45\x1f\x7e\x39\xac\xef\x2d\x25\x7b\x56\xf5\x28\x7f\x6b\x5e\xf4\xa9\x06\x44\xda\xb6\x11\xc7\x0c\x89\x83\x62\xea\x24\x37\xdd\x93\x65\x93\xf5\x90\x1d\xb3\x2c\x0e\x85\xaf\x49\x97\xa8\xca\x3d\x59\x11\xeb\x5c\x4e\x97\xf2\xeb\x0c\xba\x7a\xac\x08\x33\x6b\x8c\x3a\x03\xcc\x7f\x54\x4b\x4e\x05\xb4\xa6\xbf\x04\x54\x51\x84\x7b\xb2\x4f\x9a\xfd\xe5\x68\xe6\xbf\x81\x87\x22\x65\xec\xe6\xcd\x6c\x74\x50\x77\xcb\xc8\xe2\xe2\xe0\x18\x74\x26\xbb\x88\xfa\xd4\xe8\x25\xe7\xfd\x39\xb5\x30\x46\x12\xea\x8e\xd5\x9f\x35\x2e\x24\x65\xe7\x2f\xad\x77\x86\xaf\xac\x7a\x6c\xeb\x89\xa5\x87\xc6\xc2\xfe\x88\xea\x44\xab\x11\x65\x4d\x4e\x97\xc4\x9a\xc2\xd7\x6f\xc9\xcd\x5f\x78\xf1\xa6\xdc\xfd\x31\x2d\xc2\x3b\xf8\xb7\xf7\x93\xc0\x02\x05\xfb\xcd\x60\x25\x9f\x56\x44\xc3\x59\x5b\x53\x9d\x53\xc5\x15\xbe\xb2\x0a\x9d\x15\x64\x69\xac\x42\x9f\xec\xfd\xe3\xcf\x67\x17\x79\xc5\xfa\x7d\x18\x7b\xb4\x39\x75\xa6\xf1\x5b\xf8\xf6\xfb\xc7\xa8\x22\xf8\x83\xfa\xdd\x74\x4f\x49\x73\xc4\x3b\x25\xd1\x39\xce\x91\xe9\x44\xdf\x38\x45\x1c\x4d\xcf\xaf\x87\x6b\x86\xf5\xea\x58\x70\x49\x02\xa2\x73\x46\x30\x7a\xba\x0f\x0b\xc9\x62\x56\xdc\x64\x99\x25\x77\xa4\x56\xf6\xd5\xa4\x38\x68\xe1\xee\x0a\xcf\x2a\x1e\xcd\x2f\xe7\xc2\xa8\x66\xf1\xb6\xaf\x05\xdd\x5b\xb3\x64\xd9\xbb\x15\x37\x60\x9c\xdd\x7c\x6b\x2d\x1b\x44\xb1\x87\x25\x74\xf0\xe9\x02\x17\x4e\x00\x38\x0e\xb4\x9d\x01\xd0\x44\xa3\x75\x94\x6d\x8f\x74\x7f\x7e\x1b\x93\xc1\x7d\x2c\x0e\x56\x98\xd3\xec\x88\xd7\x06\x44\x3c\xd3\xe6\x1e\xf9\xe0\x74\x7b\xf2\x7a\x65\x34\x7b\x13\x3f\x5f\x1e\x38\xd6\x18\xff\xc3\xc8\xa0\xe8\x91\x7f\xf5\x22\x76\xac\xe6\xc0\x49\xfb\x8e\x23\x11\x2c\xfb\xcd\x17\x6b\x42\x31\xeb\x3f\x7d\xb2\x27\x35\x10\x1e\x27\xbb\x0e\xad\xc5\x4d\x27\x85\xc7\xfc\x52\xe9\xcd\x46\x11\xe6\xc3\x65\x67\x8e\x79\x5f\x26\x9c\x96\x0b\x29\x4a\x86\x3e\x9f\x98\x0f\x50\x5e\x9b\x7f\x03\xa7\xa3\x69\x71\x1c\xfe\xe0\xc8\xde\xb6\xee\x9d\x67\xe8\x31\xa8\x81\x0b\x0b\x4d\xbe\x27\xba\x06\x7c\x7b\x92\xcc\x2e\x93\x7a\xb5\x29\x5b\x96\x6d\x69\xbd\x72\x9c\xb7\xe8\x29\x1f\x3e\x22\x3d\x56\x44\xc3\x51\x57\x53\x9d\xb3\x0b\x67\x16\x59\xb3\xce\xe7\xac\xc8\x84\xdf\x7e\xf2\x00\x58\xa2\x94\x0b\x14\xcf\x73\x73\x77\xc1\xf1\xdd\x15\xc6\x0f\xdf\x33\xdf\xa6\x5d\xf0\x2c\xf9\x17\x3d\x90\x23\xbb\xa6\xac\xde\xcd\x3a\x83\x65\x48\xd3\x9e\x68\xe8\xee\xaa\x94\xbd\xd2\xbe\xbe\xca\x37\xe3\x52\x17\x90\xb4\x97\x1b\x30\x8b\x52\xb3\x6a\xd5\x05\xfd\x14\x61\x74\xd9\xff\x3f\x30\xaa\x21\xf6\x61\xdb\x21\xdb\x6b\x36\x02\xae\x91\x65\xbc\x7a\x55\x8a\x94\x2f\x0f\xb5\x16\xfb\x9d\xf4\x86\xd7\x62\x44\xb6\xa3\xb0\x27\x09\x5b\x71\x1e\x8d\x9c\xd6\x1a\x47\xdd\x3d\xb2\x76\x3b\x23\x52\x0b\x2d\x7a\xbc\xf3\x24\x37\x5c\x5a\x25\x3a\x3f\xb7\xa8\x1d\xd7\x8d\xf7\xee\x9a\xd0\x3a\x72\x3a\x0f\x9e\x15\x95\x16\x6f\xf5\xf0\x5b\x46\x94\x95\xbd\x43\xa3\xa9\xf2\x52\x5f\x7d\x33\x80\xda\xf8\xd5\x61\x2b\xaa\x1c\x75\x28\x67\xe8\x69\x14\x45\x5e\x52\xb1\xa2\x91\x4f\xa9\x05\x79\xa2\x81\xf3\xe4\xed\x9d\x91\xbc\x8f\xf6\x0b\xba\x6d\x43\xf3\xfd\x74\x56\xe4\x5c\x6f\x1b\xa9\x79\x3f\x87\x55\x50\xa8\xc1\x12\x66\x29\x2c\xab\xa5\xc0\x3a\x4b\xe7\x7b\x1d\x77\x66\x8f\x2c\x1d\xe0\xc2\x84\xde\xad\x6a\x45\x7b\x1e\xec\x36\xed\x88\xd2\x96\xd0\x75\x5f\x59\x3a\xdf\xb1\x22\x71\x44\xab\x19\x46\x1f\x5c\x85\xfd\xdb\x74\x39\x2c\x29\x3d\xba\x3c\x36\xaa\xc8\x56\x8d\x8f\xe5\x5b\xcb\x12\xe6\x36\xd0\x47\xf8\x3b\x4a\x47\x1f\xe1\x49\x3f\xeb\x9e\x96\xe3\x69\x1b\xe7\x09\xd8\x6c\x0a\x3a\xd0\xe6\x02\x81\x96\x7e\x86\xb8\x19\x1e\x8a\x1c\xf5\xe5\xe4\x28\x71\x3c\xbc\x81\x1f\x6b\x73\x1c\x1e\x06\xaa\x80\x1b\x2c\xaf\x9f\x5f\x3d\xe9\x8c\xb2\x98\x28\xb8\xbb\x4f\x66\xf0\xc2\x7e\x95\xcc\xaf\xde\x28\x61\x9e\x1e\x23\x98\x64\x06\x7c\xa8\xb5\x29\xca\xa7\xdc\x73\xf6\x78\x4b\xc2\x68\xc1\x92\x1e\xca\x17\x8b\x27\xee\xdc\x89\x1b\xfa\x3e\xb5\xdf\x79\xb7\x4c\xea\x77\x8f\x2e\x2f\x0d\xf8\xa8\x17\xd7\xf4\xbe\x3a\x88\xdd\xdd\xe0\x1e\xf8\xc1\x95\x2c\xce\x6a\xef\x97\x1b\xd7\x51\x14\xa6\x67\xbd\x06\x77\x21\xf2\xc6\x3e\x53\x7f\x03\xab\xe9\xad\xa2\x20\x0b\x92\x15\xfb\x6d\x8d\x69\xeb\xec\x57\xe8\x41\xa0\x86\x05\xd5\xfa\x77\xe6\xd9\xbb\xdb\xd4\xdf\x3b\x6b\x6e\xbc\xe6\xe5\xff\xc4\xa6\xbe\xe2\x33\xea\x39\x20\x8d\x6a\xbf\x1e\xce\x97\xd8\x9c\x9a\x3a\xf5\xe1\xf0\x0b\x69\xb2\x9d\x1d\xb4\x83\x8d\x28\xdf\x92\xee\x8e\x96\x15\x3a\xe9\xe5\xd1\xc8\x8e\x97\xb2\x3d\x70\xfe\xfa\x97\x4e\xe5\xba\x80\xa9\xfe\x47\x32\xa8\xd2\x41\x99\xe9\x71\x51\x4f\x61\xe9\x40\xa6\x35\xb5\xae\xff\x9f\xb3\xfe\xb4\xfb\x55\xfd\xf5\xa5\xfc\xb3\x45\xfa\x00\x50\x62\x31\x01\x6f\x43\xb9\x29\x38\x6f\x6c\x3c\x94\x94\x33\xff\x0b\x00\x00\xff\xff\xa2\xc8\x13\x6a\xeb\x23\x00\x00")

func oceanSpotIo_clusters_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_oceanSpotIo_clusters_crdYaml,
		"ocean.spot.io_clusters_crd.yaml",
	)
}

func oceanSpotIo_clusters_crdYaml() (*asset, error) {
	bytes, err := oceanSpotIo_clusters_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ocean.spot.io_clusters_crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _oceanSpotIo_launchspecs_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4f\x6f\xe3\xb8\x0e\xbf\xf7\x53\x10\x78\x87\xb9\x4c\x1c\x0c\xde\xc3\xc3\x43\x6e\x45\x3b\x6f\x90\xdd\xf9\x53\x34\xed\xdc\x19\x9b\x89\xb5\x95\x25\x8f\x28\xa5\x93\x59\xec\x77\x5f\x50\xb2\x13\xc7\x76\xd2\x34\xbb\x73\x58\xdf\x2c\x89\xe4\x8f\x3f\x52\x14\x25\xac\xd5\x57\x72\xac\xac\x99\x01\xd6\x8a\xbe\x7b\x32\xf2\xc7\xd9\xd3\xff\x38\x53\x76\xba\x79\xb7\x24\x8f\xef\xae\x9e\x94\x29\x66\x70\x13\xd8\xdb\xea\x9e\xd8\x06\x97\xd3\x2d\xad\x94\x51\x5e\x59\x73\x55\x91\xc7\x02\x3d\xce\xae\x00\x0c\x56\x34\x03\x8d\xc1\xe4\x25\xd7\x94\x73\x66\x73\x42\x93\x71\x6d\x7d\xa6\xec\x15\x00\x1a\x63\x3d\x8a\x20\x8b\x00\x40\x49\xba\xca\xb8\x9c\x96\xd6\x3e\xcd\x20\x77\xc5\x44\x19\xf6\xa8\xf5\x95\x28\x90\x35\x58\x14\xd1\x12\xea\x3b\xa7\x8c\x27\x77\x63\x75\xa8\x92\xfc\x04\x7e\x59\x7c\xf9\x7c\x87\xbe\x9c\x41\xc6\x1e\x7d\xe0\x2c\x99\x5f\xd4\x94\xcf\x8b\x68\xa2\x20\xce\x9d\xaa\x7d\x74\xf5\xa1\x24\x08\x46\x7d\x0b\x04\xf3\x5b\xb0\x2b\xf0\x25\xc1\xc7\x9d\x48\x14\x48\x6e\xc8\x2f\xcc\x6f\xe3\x88\xdf\xd6\x34\x03\xf6\x4e\x99\xf5\xc0\x6c\x4d\x79\xf2\xf3\x6c\x7b\x37\x3a\xb0\x27\xd7\x31\xf6\x45\xe4\xcf\xb1\xd6\xd2\x9d\xe5\x8e\x22\x8f\x0f\xaa\x22\xf6\x58\xd5\x1d\x6d\xd7\x6b\xea\x28\x2a\xd0\xcb\xef\xda\xd9\x50\xcf\xa0\x1f\x11\x91\x68\x62\x91\x22\xdd\x23\x43\x2b\xf6\xbf\xf6\x26\x3e\x2a\xf6\x71\xb2\xd6\xc1\xa1\x3e\x08\x79\x1c\x67\x65\xd6\x41\xa3\xeb\xce\x5c\x01\x70\x6e\x05\xd0\x67\x31\x59\x63\x4e\xc2\x17\x87\xa5\x6b\xb2\xaa\x81\x91\xe2\x38\x83\xdf\xff\xb8\x02\xd8\xa0\x56\x45\x74\x34\x4d\xda\x9a\xcc\xf5\xdd\xfc\xeb\xbf\x17\x79\x49\x15\xa6\xc1\x1e\xe7\x7b\xa0\x80\x5a\xdb\x67\x86\xad\x0d\xe0\x2d\xe4\xd6\xac\xd4\x3a\x38\x02\x84\x67\xeb\x9e\xb4\xc5\x22\x92\x04\x2b\xeb\x64\x91\x6b\x43\x93\x35\x7a\x6b\x67\x6b\x72\x5e\xb5\xd8\xe4\xeb\xec\x9c\xdd\x58\x0f\xc1\x1b\x81\x98\xd6\x40\x21\x7b\x85\x38\x06\x7e\x93\xc6\xa8\x00\x8e\xf0\x53\x42\x28\x06\x47\xb5\x23\x26\x93\xf6\x46\x47\x2d\xc8\x12\x34\x60\x97\xbf\x51\xee\x33\x58\x90\x13\x25\xc0\xa5\x0d\xba\x10\x8f\x36\xe4\x3c\x38\xca\xed\xda\xa8\x1f\x3b\xcd\x2c\xfe\x8a\x49\x8d\x9e\x9a\x68\xb5\x5f\xdc\x45\x06\xb5\x90\x1b\xe8\x2d\xa0\x29\xa0\xc2\x2d\x38\x12\x1b\x10\x4c\x47\x5b\x5c\xc2\x19\x7c\xb2\x8e\x40\x99\x95\x9d\x41\xe9\x7d\xcd\xb3\xe9\x74\xad\x7c\x5b\x2b\x72\x5b\x55\xc1\x28\xbf\x9d\xe6\xd6\x78\xa7\x96\xc1\x5b\xc7\xd3\x82\x36\xa4\xa7\xac\xd6\x13\x74\x79\xa9\x3c\xe5\x3e\x38\x9a\x62\xad\x26\x11\xb8\x89\x85\x20\xab\x8a\x7f\xed\x52\xe0\x4d\x07\x69\x6f\x1f\xa4\x2f\x26\xe9\x51\xde\x25\x53\x41\x31\x60\x23\x96\xf0\xef\xe9\x95\x21\x61\xe5\xfe\xfd\xe2\x01\x5a\xa3\x31\x04\x87\x9c\x47\xb6\xf7\x62\xbc\x27\x5e\x88\x52\x66\x45\x2e\x05\x6e\xe5\x6c\x15\x35\x92\x29\x6a\xab\x8c\x8f\x3f\xb9\x56\x64\x0e\x49\xe7\xb0\xac\x94\x97\x48\x7f\x0b\xc4\x5e\xe2\x93\xc1\x4d\xac\x87\xb0\x24\x08\xb5\x6c\xd3\x22\x83\xb9\x81\x1b\xac\x48\xdf\x20\xd3\x4f\xa7\x5d\x18\xe6\x89\x50\xfa\x32\xf1\xdd\x42\x7f\xb8\x30\xb1\xb5\x1b\x6e\x0b\xf7\x68\x84\x64\x57\xaa\x95\xca\x63\x9e\xb7\xf5\xb0\x20\x56\x8e\x0a\x58\x52\x89\x1b\x65\xdd\xb0\x2e\x67\x1d\x7d\x63\x7b\x32\xa6\x35\x56\x73\x39\x3b\x4c\x4e\x77\xce\xae\x94\xa6\xc3\xf9\x1e\x92\xf9\xf5\xa7\xde\xf2\x83\xad\xda\x62\x92\x6a\x44\x02\x68\xb8\x3e\xeb\xa9\x3f\x06\x4c\x3e\x74\x66\x38\x78\x84\xe9\xf6\x8b\xc5\xfc\x75\x42\xa3\x01\x89\xe4\x54\xb8\xa6\x79\xd1\x57\x77\x54\x95\xc6\x25\xe9\x81\x1f\xca\x53\x35\xe2\x5c\xaf\xfa\x2e\x49\x9f\xa6\x32\x2e\xe9\xb3\x77\x9a\x3f\x80\x27\xda\x8e\x0d\xbf\xc0\x21\xa4\x0a\x70\x81\xe4\x51\x2a\xdb\x29\x74\x0e\xb7\x87\x65\x23\x75\x01\x67\x93\xec\xac\xf5\x5f\xa5\x9b\xa1\x85\xfa\x31\xc0\x98\xc4\xa4\x58\xaf\x9b\x5e\xa1\xfd\x98\xf2\xe0\x94\xdf\x7e\x90\x23\x7d\x5e\x9c\x1b\xa6\x17\xf3\x66\xe8\x11\x87\xa5\x21\xff\x53\x4d\x78\x54\xc6\x5f\x94\x69\x0f\x22\x79\x3a\xd3\xe2\x92\xd7\x66\x1a\xad\x56\x94\xfb\x8b\x92\xed\x1f\x90\xa4\x81\xc9\xdd\xf6\xea\xf8\x09\x3b\xe3\x25\x3e\xb5\x68\xc7\x8a\xfc\x27\xcb\xb1\x25\x21\xe3\xf5\x16\xec\x92\xe5\xec\x2c\x1a\xa9\xcb\x8a\x7b\x6e\x4d\xba\x06\x0c\x22\x76\x60\xf9\x7e\x77\x62\x77\x9a\x1f\xc0\x0d\x2a\x8d\x4b\x4d\x0d\x96\x74\x01\x69\x81\xe4\xc1\xb9\xfe\x69\xdd\x3a\x39\xa8\xf1\xe7\xe4\xe5\x22\xfa\x79\xd3\x22\x16\xec\x92\xe4\xbc\x77\x22\x1e\xe9\xae\x8a\x38\x5e\x9b\x9d\x1a\xd9\x3f\x38\x34\xac\xda\xf6\x7f\x3c\x6f\x7a\x45\x99\x3d\x78\x55\x51\xf2\x78\x87\xc3\xef\x14\x51\x91\x7a\x19\x6b\xa8\x09\xd4\xa8\x56\x90\xbe\x12\x8d\xf5\xe5\xbe\x49\x3e\xfc\x92\x63\xe9\xda\x31\x11\x93\x97\xec\x07\x71\xf2\x31\xb6\x44\x67\x3a\xf8\x10\xa3\xbd\x77\x52\x75\xd9\x7e\x46\xde\x35\x58\x3f\x0f\x73\x45\xcc\xb8\x3e\x07\xec\x35\x94\xa1\x42\x03\x8e\xb0\x88\x69\xd9\x88\x82\x32\x45\x6c\x8d\xcc\x1a\x0a\xf2\xa8\x34\x03\x2e\x6d\x18\xe6\x66\x03\xa8\xa4\x4e\x04\xc7\x5d\x7b\x01\xb4\x23\x64\x3b\xda\x9a\x8c\x10\x9c\x16\xc7\xcb\xd2\x41\x1a\xbd\xe1\x86\xfb\xbf\x86\x65\x58\x55\x8e\x60\x59\x1c\x14\x92\x1d\x8c\xb7\x31\x79\xa5\xea\x3b\xb9\xd6\xfc\x1f\x35\xd3\x5b\x78\x34\x4f\xc6\x3e\x5f\x86\x28\x4e\x9f\xc1\x8d\x5c\x21\xfb\x68\x2e\x30\x28\x77\x03\x39\xbf\x86\x26\x27\xc7\xf6\xe4\x24\x6a\xfc\x3b\xce\x85\x26\xe1\x4e\x96\xd7\xf7\xdf\x3d\x99\x82\x0a\xd9\x28\x08\xc8\x6c\x73\x25\xbb\x0a\x9e\x95\x2f\xa3\xfb\xcd\x23\x0c\x3c\xc4\xcb\x91\x22\x2d\xd7\xb1\x01\x3c\x5b\xa7\x17\x9d\xd7\x74\xd0\x72\x29\x35\xb9\xd2\x74\x9f\x6e\x50\x8f\x6a\x84\xa7\x1e\xde\xc7\xfe\xcb\xcb\x4e\x49\x7b\x0f\x1b\x8b\xd2\x25\xfd\x75\xf7\xd5\xe9\x24\x85\x03\x48\xe3\xe7\xe0\x49\x1c\xed\x89\xfa\x81\x0c\xb9\xce\xe3\xc8\x11\x93\xb2\x75\xd7\xbb\xa5\xfb\xf3\x78\xb9\x6d\x33\xd6\x3b\xab\xf5\xb0\xa0\xb7\x65\x51\x19\xff\xdf\xff\x9c\xd9\x9d\x8e\x30\xd4\x1b\xda\xb4\xcf\x8e\x9b\x77\xfb\xbf\xe6\x39\x2f\xbd\x5f\xc5\x09\x69\x73\x05\xe6\x0c\xbc\x0b\xd4\xbc\x0c\x59\x27\x15\x36\x8d\xfc\x19\x00\x00\xff\xff\xaa\x42\x26\x82\xc2\x14\x00\x00")

func oceanSpotIo_launchspecs_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_oceanSpotIo_launchspecs_crdYaml,
		"ocean.spot.io_launchspecs_crd.yaml",
	)
}

func oceanSpotIo_launchspecs_crdYaml() (*asset, error) {
	bytes, err := oceanSpotIo_launchspecs_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ocean.spot.io_launchspecs_crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ocean.spot.io_clusters_crd.yaml":    oceanSpotIo_clusters_crdYaml,
	"ocean.spot.io_launchspecs_crd.yaml": oceanSpotIo_launchspecs_crdYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ocean.spot.io_clusters_crd.yaml":    &bintree{oceanSpotIo_clusters_crdYaml, map[string]*bintree{}},
	"ocean.spot.io_launchspecs_crd.yaml": &bintree{oceanSpotIo_launchspecs_crdYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
