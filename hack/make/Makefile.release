##@ Release

define RELEASE_HELP_INFO
# Release both version and annotated tag.
#
# Args:
#   VERSION: Version to release. Defaults to the content of VERSION file.
#
# Example:
#   make release
#   make release VERSION=x.y.z
endef
.PHONY: release
ifeq ($(HELP),y)
release:
	$(Q) echo "$$RELEASE_HELP_INFO"
else
release: release-tag release-artifacts ## Release a new version
endif

define RELEASE_PRECHECK_HELP_INFO
# Release precheck.
#
# Example:
#   make release-precheck
endef
.PHONY: release-precheck
ifeq ($(HELP),y)
release-precheck:
	$(Q) echo "$$RELEASE_PRECHECK_HELP_INFO"
else
release-precheck: ## Release precheck
ifneq ($(strip $(GIT_DIRTY)),)
	$(error Git is currently in a dirty state. Please commit your changes or stash them before you release)
endif
endif

define RELEASE_TAG_HELP_INFO
# Release a new annotated tag.
#
# Args:
#   VERSION: Version to release. Defaults to the content of VERSION file.
#
# Example:
#   make release-tag
#   make release-tag VERSION=x.y.z
endef
.PHONY: release-tag
ifeq ($(HELP),y)
release-tag:
	$(Q) echo "$$RELEASE_TAG_HELP_INFO"
else
release-tag: release-precheck ## Release tag
	$(Q) read -p "Next version: $(VERSION) â†’ " version; echo $$version > VERSION
	$(Q) git commit -a -m "release: v$(VERSION)"
	$(Q) git tag -f -s -m "release: v$(VERSION)" v$(VERSION)
	$(Q) git push
endif

define RELEASE_ARTIFACTS_HELP_INFO
# Release artifacts to GitHub.
#
# Example:
#   make release-artifacts
endef
.PHONY: release-artifacts
ifeq ($(HELP),y)
release-artifacts:
	$(Q) echo "$$RELEASE_ARTIFACTS_HELP_INFO"
else
release-artifacts: release-precheck ## Release artifacts to GitHub
	$(Q) $(call goreleaser_release,release)
endif
